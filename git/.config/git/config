[include]
	path = ~/.config/git/user
[push]
	default = simple

[color "diff"]
	meta = yellow
	frag = magenta
	old = red
	new = green
	plain = white

[color "status"]
	added = green bold
	changed = 178 bold
	unmerged = red bold
	untracked = 243 bold

[color "branch"]
	current = 178 bold
	local = green
	remote = blue

[diff]
	mnemonicprefix = true
	tool = vimdiff

[merge]
	tool = vimdiff
	conflictstyle = diff3

[mergetool "vimdiff"]
	cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w'

[branch]
	autosetuprebase = always

[alias]
	# make e.g. `git git clone [..]` work like `git clone`
	# also works for `git git git git git clone` (and of course other subcommands)
	git = !git

	unstage = reset HEAD --

	# undo last change, via https://megakemp.com/2016/08/25/git-undo/
	undo = "!f(){git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}};}; f"

	# alias HEAD to head
	head = "!find -type f -name HEAD -execdir ln -s '{}' head \\;"

        ##  GIT LOG
	# one line with shorthash, first line and author
	l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=format:
	# no colour version of ls for use in pipes/scripts
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	# adds changecounts of files to each line
	ls  = !git l --numstat
	# ls with relative date
	ll = !git l --date=relative
	# ls with absolute date
	ld = !git l --date=short
	# show logs with diffs for e.g. a file
	lu = log -u

	## DIFF
	# show modified files in last commit
	dl = !git ls -1 --date=relative
	# show diff with the last commit
	dlc = diff --cached HEAD^

	## LIST ALIASES
	alias = !git config -l | grep alias | grep -v '^alias\\.\\(git\\|alias\\|aliases\\)\\b'| sed -r 's/alias.([a-z]+)=(!git )?(.+)/\\1\\t \\3/' | sort -k1,1
	aliases = !git alias

	## GIT STASH
	sl  = stash list
	sa  = stash apply
	# git stash diff
	sd  = stash show -v
	ss  = stash save
	srm = stash drop

	## ASSUME UNCHANGED
	# assume files are unchanged
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	# show assumed files
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	# unassume all the assumed files
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	assumeall = "!git status -s | awk {'print $2'} | xargs git assume"
