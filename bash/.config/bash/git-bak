#!/bin/bash
#!/usr/bin/env bash

# Sexy bash prompt by twolfson
# https://github.com/twolfson/sexy-bash-prompt
# Forked from gf3, https://gist.github.com/gf3/306785

PROMPT_SYNCED_SYMBOL=" "
PROMPT_DIRTY_SYNCED_SYMBOL=" "
PROMPT_UNPUSHED_SYMBOL=" unpushed"
PROMPT_DIRTY_UNPUSHED_SYMBOL=" unpushed"
PROMPT_UNPULLED_SYMBOL=" unpulled"
PROMPT_DIRTY_UNPULLED_SYMBOL=" unpulled"
PROMPT_UNPUSHED_UNPULLED_SYMBOL=" unpushed & unpulled"
PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL=" unpushed, unpulled"


# If we are on a colored terminal
if tput setaf 1 &> /dev/null; then
    # Reset the shell from our `if` check
    tput sgr0 &> /dev/null

    # If you would like to customize your colors, use
    # # Attribution: http://linuxtidbits.wordpress.com/2008/08/11/output-color-on-bash-scripts/
    # for i in $(seq 0 $(tput colors)); do
    #   echo " $(tput setaf $i)Text$(tput sgr0) $(tput bold)$(tput setaf $i)Text$(tput sgr0) $(tput sgr 0 1)$(tput setaf $i)Text$(tput sgr0)  \$(tput setaf $i)"
    # done

    # Save common color actions
    bold="$(tput bold)"
    reset="$(tput sgr0)"

    # If the terminal supports at least 256 colors, write out our 256 color based set
    if [[ "$(tput colors)" -ge 256 ]] &> /dev/null; then
	user_color="$bold$(tput setaf 27)" # BOLD BLUE
	preposition_color="$reset" #$bold$(tput setaf 7)" # BOLD WHITE
	device_color="$bold$(tput setaf 39)" # BOLD CYAN
	dir_color="$bold$(tput setaf 76)" # BOLD GREEN
	git_status_color="$bold$(tput setaf 178)" # BOLD YELLOW
	git_progress_color="$bold$(tput setaf 9)" # BOLD RED
    else
	# Otherwise, use colors from our set of 8
	user_color="$bold$(tput setaf 4)" # BOLD BLUE
	preposition_color="$bold$(tput setaf 7)" # BOLD WHITE
	device_color="$bold$(tput setaf 6)" # BOLD CYAN
	dir_color="$bold$(tput setaf 2)" # BOLD GREEN
	git_status_color="$bold$(tput setaf 3)" # BOLD YELLOW
	git_progress_color="$bold$(tput setaf 1)" # BOLD RED
    fi

    symbol_color="$bold" # BOLD

else
    # Otherwise, use ANSI escape sequences for coloring
    # If you would like to customize your colors, use
    # DEV: 30-39 lines up 0-9 from `tput`
    # for i in $(seq 0 109); do
    #   echo -n -e "\033[1;${i}mText$(tput sgr0) "
    #   echo "\033[1;${i}m"
    # done

    reset="\033[m"
    user_color="\033[1;34m" # BLUE
    preposition_color="\033[1;37m" # WHITE
    device_color="\033[1;36m" # CYAN
    dir_color="\033[1;32m" # GREEN
    git_status_color="\033[1;33m" # YELLOW
    git_progress_color="\033[1;31m" # RED
    symbol_color="" # NORMAL
fi

# Apply any color overrides that have been set in the environment
if [[ -n "$PROMPT_USER_COLOR" ]]; then user_color="$PROMPT_USER_COLOR"; fi
if [[ -n "$PROMPT_PREPOSITION_COLOR" ]]; then preposition_color="$PROMPT_PREPOSITION_COLOR"; fi
if [[ -n "$PROMPT_DEVICE_COLOR" ]]; then device_color="$PROMPT_DEVICE_COLOR"; fi
if [[ -n "$PROMPT_DIR_COLOR" ]]; then dir_color="$PROMPT_DIR_COLOR"; fi
if [[ -n "$PROMPT_GIT_STATUS_COLOR" ]]; then git_status_color="$PROMPT_GIT_STATUS_COLOR"; fi
if [[ -n "$PROMPT_GIT_PROGRESS_COLOR" ]]; then git_progress_color="$PROMPT_GIT_PROGRESS_COLOR"; fi
if [[ -n "$PROMPT_SYMBOL_COLOR" ]]; then symbol_color="$PROMPT_SYMBOL_COLOR"; fi

# Set up symbols
synced_symbol=""
dirty_synced_symbol="*"
unpushed_symbol="Ã¢â€“Â³"
dirty_unpushed_symbol="Ã¢â€“Â²"
unpulled_symbol="Ã¢â€“Â½"
dirty_unpulled_symbol="Ã¢â€“Â¼"
unpushed_unpulled_symbol="Ã¢Â¬Â¡"
dirty_unpushed_unpulled_symbol="Ã¢Â¬Â¢"

# Apply symbol overrides that have been set in the environment
# DEV: Working unicode symbols can be determined via the following gist
#   **WARNING: The following gist has 64k lines and may freeze your browser**
#   https://gist.github.com/twolfson/9cc7968eb6ee8b9ad877
if [[ -n "$PROMPT_SYNCED_SYMBOL" ]]; then synced_symbol="$PROMPT_SYNCED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_SYNCED_SYMBOL" ]]; then dirty_synced_symbol="$PROMPT_DIRTY_SYNCED_SYMBOL"; fi
if [[ -n "$PROMPT_UNPUSHED_SYMBOL" ]]; then unpushed_symbol="$PROMPT_UNPUSHED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_UNPUSHED_SYMBOL" ]]; then dirty_unpushed_symbol="$PROMPT_DIRTY_UNPUSHED_SYMBOL"; fi
if [[ -n "$PROMPT_UNPULLED_SYMBOL" ]]; then unpulled_symbol="$PROMPT_UNPULLED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_UNPULLED_SYMBOL" ]]; then dirty_unpulled_symbol="$PROMPT_DIRTY_UNPULLED_SYMBOL"; fi
if [[ -n "$PROMPT_UNPUSHED_UNPULLED_SYMBOL" ]]; then unpushed_unpulled_symbol="$PROMPT_UNPUSHED_UNPULLED_SYMBOL"; fi
if [[ -n "$PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL" ]]; then dirty_unpushed_unpulled_symbol="$PROMPT_DIRTY_UNPUSHED_UNPULLED_SYMBOL"; fi


user_name="\u"
host_name="\h"

#name overrides
if [[ -n "$PROMPT_USER_NAME" ]]; then user_name="$PROMPT_USER_NAME"; fi
if [[ -n "$PROMPT_HOST_NAME" ]]; then host_name="$PROMPT_HOST_NAME"; fi

if [[ $UID -eq 0 ]]; then user_color="$bldred"; symbol_color=$bldred; fi


# Returns the number of untracked files

function vgit_clean() {

    if [ $(vgit_dirty) -eq 0 ] && [ $(vgit_staged) -eq 0 ] && [ $(vgit_delete) -eq 0 ] && [ $(evil_git_num_untracked_files) -eq 0 ];
    then
	return 1;
    else
	return 0;
    fi
}

function get_vgit_changes() {
    #check for repo
    is_on_git || return;

    ## vince_git_[status]
    # changed files in working tree
    vgdirty="$(git status --porcelain 2>/dev/null| egrep "^.(D|M)" | wc -l | sed 's/ *//')"
    # files staged in idex (for next commit)
    vgstaged="$(git status --porcelain 2>/dev/null| egrep "^(M|A|D|R).?" | wc -l | sed 's/ *//')"
    # deleted and moved files (all stges)
    vgdelete="$(git status --porcelain 2>/dev/null| egrep "^.?(D|R)" | wc -l | sed 's/ *//')"
    # untracked files
    vguntrack="$(git status --porcelain 2>/dev/null| grep "^??" | wc -l | sed 's/ *//')"

    if [[ $vgdirty -ne 0 || $vgstaged -ne 0 || $vgdelete -ne 0 || $vguntrack -ne 0 ]];
    then
	if [[ ! -z $COMPACT_PROMPT ]];
	then
	    #  if [[ $vgstaged -ne 0 ]]; then
	    echo -en "$txtgrn$vgstaged  ";
	    #fi
	    #  if [[ $vgdirty -ne 0 ]]; then
	    echo -en "$txtylw$vgdirty  ";
	    #fi
	    #  if [[ $vgdelete -ne 0 ]]; then
	    echo -en "$txtred$vgdelete  ";
	    #fi
	    #  if [[ $vguntrack -ne 0 ]];then
	    echo -en "$txtrst$vguntrack";
	    #fi
	    echo -ne "$txtrst"
	    return;
	fi

	echo -ne "$preposition_color ðŸ—‡ $txtrst"

	if [ $vgstaged ];
	then
	    echo -ne "$txtgrn ðŸ“„ $vgstaged";
	fi

	if [ $vgdirty ];
	then
	    echo -ne "$txtylw ðŸ“„ $vgdirty";
	fi

	if [ $vgdelete ];
	then
	    echo -ne "$txtred ðŸ“„ $vgdelete";
	fi

	if [ $vguntrack ];
	then
	    echo -ne "$txtrst ðŸ“„ $vguntrack";
	fi
	echo -ne "$txtrst"
    fi
}


