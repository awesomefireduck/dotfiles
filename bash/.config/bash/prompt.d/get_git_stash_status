#!/bin/bash
strip_stashbrackets() {
	sed -e 's/stash@{//' -e 's/}://'
}

get_git_stash_status () {
	if [[ -z "$(git rev-parse HEAD 2>/dev/null)" ]]; then
		return
	fi

	# Grab the branch
	branch="$(get_git_branch)"
	head="$(git rev-parse --short HEAD)"

	# check for stashes matching this branch
	stashes="$(git stash list | grep "${branch}" | strip_stashbrackets)"
	[[ -z "$stashes" ]] && return

	# check if commit id's are visible
	commit_ids="$(echo "$stashes" | grep ' [a-zA-Z0-9]\{7\} ' | sed -re 's/([0-9]+).* ([0-9a-zA-Z]{7}) .*/\1:\2/')"
	#[[ -z "$commit_ids" ]] && return


	# stash entries that do not have a commit id
	unknown_stashes="$(echo "$stashes" | grep -v ': [a-zA-Z0-9]\{7\}' | sed -e 's/\([0-9]\+\) .*/\1/' | tr "\n" ' ' )"
	unknown_stash_count="$(echo "$unknown_stashes" |  wc -w)"
	# stashes matching the current HEAD
	matching_stashes=""
	matching_stash_count=0
	# stashes not matching HEAD
	outdated_stash_count=0
	outdated_stashes=""

	for id in $commit_ids; do
		stash_num="$(echo "$id" | sed -e 's/:.*//')"
		if [[ "$id" == *"$head"* ]]; then
			matching_stashes+=" $stash_num"
			((matching_stash_count++))
		else
			outdated_stashes+=" $stash_num"
			((outdated_stash_count++))
		fi
	done

	if [[ "$matching_stash_count" -gt 0 ]] || [[ "$outdated_stash_count" -gt 0 ]] || [[ "$unknown_stash_count" -gt 0 ]]; then
		append_line "ğŸ—³ "
		if [[ "$matching_stash_count" -gt 0 ]]; then
			append "${bold_blue} ğŸ†•$matching_stashes$textreset"
		fi
		if [[ "$outdated_stash_count" -gt 0 ]]; then
			append "${bold_white} ğŸ•‘$outdated_stashes$textreset"
		fi
		if [[ "$unknown_stash_count" -gt 0 ]]; then
			append "${bold_red} ï¼Ÿ$unknown_stashes$textreset"
		fi
	fi
}
